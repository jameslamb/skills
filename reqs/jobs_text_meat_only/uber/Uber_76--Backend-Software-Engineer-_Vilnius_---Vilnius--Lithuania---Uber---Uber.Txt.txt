Uber 76--Backend-Software-Engineer-(Vilnius)---Vilnius--Lithuania---Uber---Uber.Txt





the
observability vilnius
team is part of the observability group within uber infrastructure. we are charged with delivering platforms in two specific domains at uber: on-call experience and host-level monitoring. our team works with the rest of the observability group to build the tools to monitor physical infrastructure at uber and build Â applications that our engineers across uber use to ensure on-call & incident response processes are running properly.


the
observability vilnius
team works on a few full stack applications for supporting on-call engineers on their duties, monitoring, alerting and generally making sense of millions of hosts checks that are monitored at uber.

as part of our team you'll focus primarily on the back-end of these applications along with a few other backend-end and full-stack engineers. some of the work you'd be involved in includes:

building a platform for on-call, incident response and incident review processes management.
building an open-source platform for host-level monitoring.
prototyping new features to make the lives our engineers at uber easier.
putting the new features that work into production and ditching the ones that don't.
you'll generally help build out some of our existing tools, as well as craft new ones. we aspire to make most of our work open source, and prefer like minded team members who understand the balance of building software for use inside of uber that also has a path for external use via open source.


generally, you'll do well on our team and enjoy the kind of projects we work on if you:
good programming skills in one of c++, java, python or go, and an ability to pick up new ones.
experience in designing, building and maintaining highly scalable, reliable and fault-tolerant services that would support our unique rate-of-growth requirements.
experience with programming tools (e.g. version control).
experience in the linux environment and a good understanding of its fundamentals and internals: filesystems and modern memory management, threads and processes, the user/kernel-space divide, etc.
a good understanding of large-scale distributed systems in practice, including multi-tier architectures, application security, monitoring and storage systems.
working knowledge of the tcp/ip stack, internet routing and load balancing.
ability to keep yourself up-to-date with the latest technological trends.
being committed to quality, performance, and efficiency.
being able to thrive in a fast and growing environment where all hands are on deck, and consider no obstacle too big or too small.

